// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: api/protobuf-spec/ofc_certificate/ofc_com_certificate.proto

package ofc_certificate

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//添加ios证书
type IosCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appkey                 string `protobuf:"bytes,1,opt,name=appkey,proto3" json:"appkey,omitempty" v:"required#参数appkey必须"`
	CertificateName        string `protobuf:"bytes,2,opt,name=certificate_name,json=certificateName,proto3" json:"certificate_name,omitempty" v:"required#参数certificate_name必须"`
	CertificateClass       string `protobuf:"bytes,3,opt,name=certificate_class,json=certificateClass,proto3" json:"certificate_class,omitempty" v:"required#参数certificate_class必须"`
	P12                    string `protobuf:"bytes,4,opt,name=p12,proto3" json:"p12,omitempty"`
	P8                     string `protobuf:"bytes,5,opt,name=p8,proto3" json:"p8,omitempty"`
	BundleIdentifier       string `protobuf:"bytes,6,opt,name=bundle_identifier,json=bundleIdentifier,proto3" json:"bundle_identifier,omitempty"`
	SecretKey              string `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	CertificateEnvironment int64  `protobuf:"varint,8,opt,name=certificate_environment,json=certificateEnvironment,proto3" json:"certificate_environment,omitempty" v:"required#参数certificate_environment必须"`
	TeamId                 string `protobuf:"bytes,9,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	KeyId                  string `protobuf:"bytes,10,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *IosCertificateRequest) Reset() {
	*x = IosCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosCertificateRequest) ProtoMessage() {}

func (x *IosCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosCertificateRequest.ProtoReflect.Descriptor instead.
func (*IosCertificateRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *IosCertificateRequest) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *IosCertificateRequest) GetCertificateName() string {
	if x != nil {
		return x.CertificateName
	}
	return ""
}

func (x *IosCertificateRequest) GetCertificateClass() string {
	if x != nil {
		return x.CertificateClass
	}
	return ""
}

func (x *IosCertificateRequest) GetP12() string {
	if x != nil {
		return x.P12
	}
	return ""
}

func (x *IosCertificateRequest) GetP8() string {
	if x != nil {
		return x.P8
	}
	return ""
}

func (x *IosCertificateRequest) GetBundleIdentifier() string {
	if x != nil {
		return x.BundleIdentifier
	}
	return ""
}

func (x *IosCertificateRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *IosCertificateRequest) GetCertificateEnvironment() int64 {
	if x != nil {
		return x.CertificateEnvironment
	}
	return 0
}

func (x *IosCertificateRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *IosCertificateRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

//添加android证书
type AndroidCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appkey                 string `protobuf:"bytes,1,opt,name=appkey,proto3" json:"appkey,omitempty" v:"required#参数appkey必须"`
	CertificateName        string `protobuf:"bytes,2,opt,name=certificate_name,json=certificateName,proto3" json:"certificate_name,omitempty" v:"required#参数certificate_name必须"`
	CertificateClass       string `protobuf:"bytes,3,opt,name=certificate_class,json=certificateClass,proto3" json:"certificate_class,omitempty" v:"required#参数certificate_class必须"`
	AndroidPackage         string `protobuf:"bytes,4,opt,name=android_package,json=androidPackage,proto3" json:"android_package,omitempty" v:"required#参数android_package必须"`
	AndroidAppid           string `protobuf:"bytes,5,opt,name=android_appid,json=androidAppid,proto3" json:"android_appid,omitempty"`
	AndroidAppsecret       string `protobuf:"bytes,6,opt,name=android_appsecret,json=androidAppsecret,proto3" json:"android_appsecret,omitempty"`
	AndroidAppkey          string `protobuf:"bytes,7,opt,name=android_appkey,json=androidAppkey,proto3" json:"android_appkey,omitempty"`
	Activity               string `protobuf:"bytes,8,opt,name=activity,proto3" json:"activity,omitempty"`
	MasterSecret           string `protobuf:"bytes,9,opt,name=master_secret,json=masterSecret,proto3" json:"master_secret,omitempty"`
	CertificateEnvironment int64  `protobuf:"varint,10,opt,name=certificate_environment,json=certificateEnvironment,proto3" json:"certificate_environment,omitempty" v:"required#参数certificate_environment必须"`
}

func (x *AndroidCertificateRequest) Reset() {
	*x = AndroidCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateRequest) ProtoMessage() {}

func (x *AndroidCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateRequest.ProtoReflect.Descriptor instead.
func (*AndroidCertificateRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *AndroidCertificateRequest) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *AndroidCertificateRequest) GetCertificateName() string {
	if x != nil {
		return x.CertificateName
	}
	return ""
}

func (x *AndroidCertificateRequest) GetCertificateClass() string {
	if x != nil {
		return x.CertificateClass
	}
	return ""
}

func (x *AndroidCertificateRequest) GetAndroidPackage() string {
	if x != nil {
		return x.AndroidPackage
	}
	return ""
}

func (x *AndroidCertificateRequest) GetAndroidAppid() string {
	if x != nil {
		return x.AndroidAppid
	}
	return ""
}

func (x *AndroidCertificateRequest) GetAndroidAppsecret() string {
	if x != nil {
		return x.AndroidAppsecret
	}
	return ""
}

func (x *AndroidCertificateRequest) GetAndroidAppkey() string {
	if x != nil {
		return x.AndroidAppkey
	}
	return ""
}

func (x *AndroidCertificateRequest) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

func (x *AndroidCertificateRequest) GetMasterSecret() string {
	if x != nil {
		return x.MasterSecret
	}
	return ""
}

func (x *AndroidCertificateRequest) GetCertificateEnvironment() int64 {
	if x != nil {
		return x.CertificateEnvironment
	}
	return 0
}

//删除证书
type IdCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty" v:"required#参数certificate_id必须"`
}

func (x *IdCertificateRequest) Reset() {
	*x = IdCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdCertificateRequest) ProtoMessage() {}

func (x *IdCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdCertificateRequest.ProtoReflect.Descriptor instead.
func (*IdCertificateRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *IdCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

//获取单个证书信息
type OneCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appkey                 string `protobuf:"bytes,1,opt,name=appkey,proto3" json:"appkey,omitempty" v:"required#appkey必须"`
	CertificateClass       string `protobuf:"bytes,2,opt,name=certificate_class,json=certificateClass,proto3" json:"certificate_class,omitempty" v:"required#参数certificate_class必须"`
	CertificateEnvironment int64  `protobuf:"varint,3,opt,name=certificate_environment,json=certificateEnvironment,proto3" json:"certificate_environment,omitempty" v:"required#参数certificate_environment必须"`
	CertificateType        string `protobuf:"bytes,4,opt,name=certificate_type,json=certificateType,proto3" json:"certificate_type,omitempty"`
}

func (x *OneCertificateRequest) Reset() {
	*x = OneCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneCertificateRequest) ProtoMessage() {}

func (x *OneCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneCertificateRequest.ProtoReflect.Descriptor instead.
func (*OneCertificateRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *OneCertificateRequest) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *OneCertificateRequest) GetCertificateClass() string {
	if x != nil {
		return x.CertificateClass
	}
	return ""
}

func (x *OneCertificateRequest) GetCertificateEnvironment() int64 {
	if x != nil {
		return x.CertificateEnvironment
	}
	return 0
}

func (x *OneCertificateRequest) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

//单个证书信息返回
type OneCertificateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid                    string   `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Appkey                 string   `protobuf:"bytes,2,opt,name=appkey,proto3" json:"appkey,omitempty"`
	CertificateType        string   `protobuf:"bytes,3,opt,name=certificate_type,json=certificateType,proto3" json:"certificate_type,omitempty"`
	CertificateClass       string   `protobuf:"bytes,4,opt,name=certificate_class,json=certificateClass,proto3" json:"certificate_class,omitempty"`
	CertificateName        string   `protobuf:"bytes,5,opt,name=certificate_name,json=certificateName,proto3" json:"certificate_name,omitempty"`
	CertificateEnvironment int64    `protobuf:"varint,6,opt,name=certificate_environment,json=certificateEnvironment,proto3" json:"certificate_environment,omitempty"`
	CertificateData        *any.Any `protobuf:"bytes,7,opt,name=certificate_data,json=certificateData,proto3" json:"certificate_data,omitempty"`
}

func (x *OneCertificateReply) Reset() {
	*x = OneCertificateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneCertificateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneCertificateReply) ProtoMessage() {}

func (x *OneCertificateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneCertificateReply.ProtoReflect.Descriptor instead.
func (*OneCertificateReply) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{4}
}

func (x *OneCertificateReply) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *OneCertificateReply) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *OneCertificateReply) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *OneCertificateReply) GetCertificateClass() string {
	if x != nil {
		return x.CertificateClass
	}
	return ""
}

func (x *OneCertificateReply) GetCertificateName() string {
	if x != nil {
		return x.CertificateName
	}
	return ""
}

func (x *OneCertificateReply) GetCertificateEnvironment() int64 {
	if x != nil {
		return x.CertificateEnvironment
	}
	return 0
}

func (x *OneCertificateReply) GetCertificateData() *any.Any {
	if x != nil {
		return x.CertificateData
	}
	return nil
}

//获取证书列表
type CertificateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appkey           string `protobuf:"bytes,1,opt,name=appkey,proto3" json:"appkey,omitempty" v:"required#参数appkey必须"`
	CertificateType  string `protobuf:"bytes,2,opt,name=certificate_type,json=certificateType,proto3" json:"certificate_type,omitempty" v:"required#参数certificate_type必须"`
	CertificateClass string `protobuf:"bytes,3,opt,name=certificate_class,json=certificateClass,proto3" json:"certificate_class,omitempty"`
}

func (x *CertificateListRequest) Reset() {
	*x = CertificateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListRequest) ProtoMessage() {}

func (x *CertificateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListRequest.ProtoReflect.Descriptor instead.
func (*CertificateListRequest) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{5}
}

func (x *CertificateListRequest) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *CertificateListRequest) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *CertificateListRequest) GetCertificateClass() string {
	if x != nil {
		return x.CertificateClass
	}
	return ""
}

//证书列表返回
type CertificateListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*OneCertificateReply `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *CertificateListReply) Reset() {
	*x = CertificateListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListReply) ProtoMessage() {}

func (x *CertificateListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListReply.ProtoReflect.Descriptor instead.
func (*CertificateListReply) Descriptor() ([]byte, []int) {
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP(), []int{6}
}

func (x *CertificateListReply) GetList() []*OneCertificateReply {
	if x != nil {
		return x.List
	}
	return nil
}

var File_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto protoreflect.FileDescriptor

var file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x6f, 0x66, 0x63, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x66, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6f,
	0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f,
	0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88,
	0x03, 0x0a, 0x15, 0x49, 0x6f, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x10,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x31, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x31, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x70, 0x38, 0x12, 0x33, 0x0a, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18,
	0x03, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x19, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x10, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x2f, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70,
	0x70, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x17, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a,
	0x14, 0x49, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x03, 0x52, 0x16,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x98, 0x01, 0x0a, 0x16, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x10, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xe7, 0x03,
	0x0a, 0x15, 0x4f, 0x66, 0x63, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x49, 0x6f, 0x73, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x26, 0x2e, 0x6f,
	0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6f, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x15, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x2a, 0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x0e, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6f, 0x66, 0x63, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescOnce sync.Once
	file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescData = file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDesc
)

func file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescGZIP() []byte {
	file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescOnce.Do(func() {
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescData)
	})
	return file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDescData
}

var file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_goTypes = []interface{}{
	(*IosCertificateRequest)(nil),     // 0: ofc.certificate.IosCertificateRequest
	(*AndroidCertificateRequest)(nil), // 1: ofc.certificate.AndroidCertificateRequest
	(*IdCertificateRequest)(nil),      // 2: ofc.certificate.IdCertificateRequest
	(*OneCertificateRequest)(nil),     // 3: ofc.certificate.OneCertificateRequest
	(*OneCertificateReply)(nil),       // 4: ofc.certificate.OneCertificateReply
	(*CertificateListRequest)(nil),    // 5: ofc.certificate.CertificateListRequest
	(*CertificateListReply)(nil),      // 6: ofc.certificate.CertificateListReply
	(*any.Any)(nil),                   // 7: google.protobuf.Any
	(*empty.Empty)(nil),               // 8: google.protobuf.Empty
}
var file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_depIdxs = []int32{
	7, // 0: ofc.certificate.OneCertificateReply.certificate_data:type_name -> google.protobuf.Any
	4, // 1: ofc.certificate.CertificateListReply.List:type_name -> ofc.certificate.OneCertificateReply
	0, // 2: ofc.certificate.OfcCertificateService.IosCertificateAdd:input_type -> ofc.certificate.IosCertificateRequest
	1, // 3: ofc.certificate.OfcCertificateService.AndroidCertificateAdd:input_type -> ofc.certificate.AndroidCertificateRequest
	3, // 4: ofc.certificate.OfcCertificateService.OneCertificate:input_type -> ofc.certificate.OneCertificateRequest
	2, // 5: ofc.certificate.OfcCertificateService.DelCertificate:input_type -> ofc.certificate.IdCertificateRequest
	5, // 6: ofc.certificate.OfcCertificateService.CertificateList:input_type -> ofc.certificate.CertificateListRequest
	8, // 7: ofc.certificate.OfcCertificateService.IosCertificateAdd:output_type -> google.protobuf.Empty
	8, // 8: ofc.certificate.OfcCertificateService.AndroidCertificateAdd:output_type -> google.protobuf.Empty
	4, // 9: ofc.certificate.OfcCertificateService.OneCertificate:output_type -> ofc.certificate.OneCertificateReply
	8, // 10: ofc.certificate.OfcCertificateService.DelCertificate:output_type -> google.protobuf.Empty
	6, // 11: ofc.certificate.OfcCertificateService.CertificateList:output_type -> ofc.certificate.CertificateListReply
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_init() }
func file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_init() {
	if File_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneCertificateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_goTypes,
		DependencyIndexes: file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_depIdxs,
		MessageInfos:      file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_msgTypes,
	}.Build()
	File_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto = out.File
	file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_rawDesc = nil
	file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_goTypes = nil
	file_api_protobuf_spec_ofc_certificate_ofc_com_certificate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OfcCertificateServiceClient is the client API for OfcCertificateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OfcCertificateServiceClient interface {
	IosCertificateAdd(ctx context.Context, in *IosCertificateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AndroidCertificateAdd(ctx context.Context, in *AndroidCertificateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	OneCertificate(ctx context.Context, in *OneCertificateRequest, opts ...grpc.CallOption) (*OneCertificateReply, error)
	DelCertificate(ctx context.Context, in *IdCertificateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CertificateList(ctx context.Context, in *CertificateListRequest, opts ...grpc.CallOption) (*CertificateListReply, error)
}

type ofcCertificateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfcCertificateServiceClient(cc grpc.ClientConnInterface) OfcCertificateServiceClient {
	return &ofcCertificateServiceClient{cc}
}

func (c *ofcCertificateServiceClient) IosCertificateAdd(ctx context.Context, in *IosCertificateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ofc.certificate.OfcCertificateService/IosCertificateAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ofcCertificateServiceClient) AndroidCertificateAdd(ctx context.Context, in *AndroidCertificateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ofc.certificate.OfcCertificateService/AndroidCertificateAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ofcCertificateServiceClient) OneCertificate(ctx context.Context, in *OneCertificateRequest, opts ...grpc.CallOption) (*OneCertificateReply, error) {
	out := new(OneCertificateReply)
	err := c.cc.Invoke(ctx, "/ofc.certificate.OfcCertificateService/OneCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ofcCertificateServiceClient) DelCertificate(ctx context.Context, in *IdCertificateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ofc.certificate.OfcCertificateService/DelCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ofcCertificateServiceClient) CertificateList(ctx context.Context, in *CertificateListRequest, opts ...grpc.CallOption) (*CertificateListReply, error) {
	out := new(CertificateListReply)
	err := c.cc.Invoke(ctx, "/ofc.certificate.OfcCertificateService/CertificateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfcCertificateServiceServer is the server API for OfcCertificateService service.
type OfcCertificateServiceServer interface {
	IosCertificateAdd(context.Context, *IosCertificateRequest) (*empty.Empty, error)
	AndroidCertificateAdd(context.Context, *AndroidCertificateRequest) (*empty.Empty, error)
	OneCertificate(context.Context, *OneCertificateRequest) (*OneCertificateReply, error)
	DelCertificate(context.Context, *IdCertificateRequest) (*empty.Empty, error)
	CertificateList(context.Context, *CertificateListRequest) (*CertificateListReply, error)
}

// UnimplementedOfcCertificateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOfcCertificateServiceServer struct {
}

func (*UnimplementedOfcCertificateServiceServer) IosCertificateAdd(context.Context, *IosCertificateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IosCertificateAdd not implemented")
}
func (*UnimplementedOfcCertificateServiceServer) AndroidCertificateAdd(context.Context, *AndroidCertificateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AndroidCertificateAdd not implemented")
}
func (*UnimplementedOfcCertificateServiceServer) OneCertificate(context.Context, *OneCertificateRequest) (*OneCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneCertificate not implemented")
}
func (*UnimplementedOfcCertificateServiceServer) DelCertificate(context.Context, *IdCertificateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCertificate not implemented")
}
func (*UnimplementedOfcCertificateServiceServer) CertificateList(context.Context, *CertificateListRequest) (*CertificateListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateList not implemented")
}

func RegisterOfcCertificateServiceServer(s *grpc.Server, srv OfcCertificateServiceServer) {
	s.RegisterService(&_OfcCertificateService_serviceDesc, srv)
}

func _OfcCertificateService_IosCertificateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IosCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfcCertificateServiceServer).IosCertificateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ofc.certificate.OfcCertificateService/IosCertificateAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfcCertificateServiceServer).IosCertificateAdd(ctx, req.(*IosCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfcCertificateService_AndroidCertificateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AndroidCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfcCertificateServiceServer).AndroidCertificateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ofc.certificate.OfcCertificateService/AndroidCertificateAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfcCertificateServiceServer).AndroidCertificateAdd(ctx, req.(*AndroidCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfcCertificateService_OneCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfcCertificateServiceServer).OneCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ofc.certificate.OfcCertificateService/OneCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfcCertificateServiceServer).OneCertificate(ctx, req.(*OneCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfcCertificateService_DelCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfcCertificateServiceServer).DelCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ofc.certificate.OfcCertificateService/DelCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfcCertificateServiceServer).DelCertificate(ctx, req.(*IdCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfcCertificateService_CertificateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfcCertificateServiceServer).CertificateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ofc.certificate.OfcCertificateService/CertificateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfcCertificateServiceServer).CertificateList(ctx, req.(*CertificateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OfcCertificateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ofc.certificate.OfcCertificateService",
	HandlerType: (*OfcCertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IosCertificateAdd",
			Handler:    _OfcCertificateService_IosCertificateAdd_Handler,
		},
		{
			MethodName: "AndroidCertificateAdd",
			Handler:    _OfcCertificateService_AndroidCertificateAdd_Handler,
		},
		{
			MethodName: "OneCertificate",
			Handler:    _OfcCertificateService_OneCertificate_Handler,
		},
		{
			MethodName: "DelCertificate",
			Handler:    _OfcCertificateService_DelCertificate_Handler,
		},
		{
			MethodName: "CertificateList",
			Handler:    _OfcCertificateService_CertificateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf-spec/ofc_certificate/ofc_com_certificate.proto",
}
